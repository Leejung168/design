---
- name: Set datadir root
  set_fact:
    fact_mysql_dir={% if not server_enable_lvm %}/var/lib/mysql{% else %}{{ mysql_lvm_lv_mountpoint }}{% endif %}
  delegate_to: 127.0.0.1

# Handle the file system and LVM
- name: Ensure lvm for mysql
  lvol: 
    vg="{{ mysql_lvm_vg_name }}"
    lv="{{ mysql_lvm_lv_name }}"
    size="{{ mysql_lvm_lv_size }}"
    state=present
  when: server_enable_lvm

- name: Ensure mysql folder
  file: 
    dest="{{ fact_mysql_dir }}"
    state=directory
  register: mysql_new_dir

- name: Ensure mysql folder
  file: 
    dest="{{ fact_mysql_dir }}"
    owner=root
    group=root
    state=directory
  when: mysql_new_dir.changed

- name: Ensure filesystem for mysql
  filesystem:
    fstype="{{ mysql_lvm_lv_fstype }}"
    dev="/dev/{{ mysql_lvm_vg_name }}/{{ mysql_lvm_lv_name }}"
  when: server_enable_lvm

- name: Mount mysql root folder
  mount: 
    name="{{ fact_mysql_dir }}"
    src="/dev/{{ mysql_lvm_vg_name }}/{{ mysql_lvm_lv_name }}"
    fstype="{{ mysql_lvm_lv_fstype }}"
    opts="{{ mysql_lvm_lv_mountpoint_options | default('') | replace(';',',') }}"
    state=mounted
  when: server_enable_lvm

# Cheat and hardcode version
- name: Register mysql server version
  set_fact:
    mysql_template_version_file='5.6/my.cnf.percona.j2'
  delegate_to: 127.0.0.1
  when: mysql_version == 'Percona 5.6'

- name: Register mysql server version
  set_fact:
    mysql_template_version_file='5.7/my.cnf.percona.j2'
  delegate_to: 127.0.0.1
  when: mysql_version == 'Percona 5.7'

- name: Register mysql client version
  set_fact:
    mysql_client_template_version=5.6
  delegate_to: 127.0.0.1
  when: mysql_version == 'Percona 5.6'

- name: Register mysql client version
  set_fact:
    mysql_client_template_version=5.7
  delegate_to: 127.0.0.1
  when: mysql_version == 'Percona 5.7'

# Handle the config file
- name: Ensure MySQL server configuration
  template:
    src="{{ mysql_template_version_file }}"
    dest=/etc/my.cnf
    owner=root
    group=root
    mode=0644
  notify:
    - restart mysql


# Handle the RPM packages
# Percona
- name: Ensure Percona RPM repo
  yum:
    name=http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm
    state=present
  when:
    mysql_version == 'Percona 5.6' or mysql_version == 'Percona 5.7'


- name: Ensure Percona installed
  yum:
    name="{{ item }}"
    state=present
  with_items:
      - Percona-Server-server-56.x86_64
  when:
    mysql_version == 'Percona 5.6'

- name: Ensure Percona installed
  yum:
    name="{{ item }}"
    state=present
  with_items:
      - Percona-Server-server-57.x86_64
  when:
    mysql_version == 'Percona 5.7'

- name: Add add percona tools 
  yum: 
    name=percona-toolkit
    state=present
  when:
    mysql_version == 'Percona 5.6' or mysql_version == 'Percona 5.7'

- name: Enable MySQL at boot (Percona)
  service:
    name=mysql
    enabled=yes
  when:
    mysql_version == 'Percona 5.6' or mysql_version == 'Percona 5.7'


# Ensure config file still exists - some RPM will move it to my.cnf.rpmsave
- name: Ensure MySQL server configuration
  template:
    src="{{ mysql_template_version_file }}"
    dest=/etc/my.cnf
    owner=root
    group=root
    mode=0644

# Ensure the proper ownership of the files
- name: Change owner for mysql folder
  file:
    dest="{{ fact_mysql_dir }}"
    owner=mysql
    group=mysql
    recurse=yes
    state=directory

- name: create mysql data folder
  file:
    dest="{{ mysql_datadir }}"
    owner=mysql
    group=mysql
    state=directory

- name: Ensure mysql is running (Percona)
  service:
    name=mysql
    state=started
  when:
    mysql_version == 'Percona 5.6' or mysql_version == 'Percona 5.7'

- name: Ensure mysql python installed (non-amzn)
  yum: 
    name=MySQL-python.x86_64
    state=present
  when:
    ansible_distribution != "Amazon"

- name: Ensure mysql python installed (amzn)
  yum: 
    name=MySQL-python27.x86_64
    state=present
  when:
    ansible_distribution == "Amazon"

# Ensure the user passwords of the mysql users

# Should use the with_password lookup instead of hardcoded in the variable
- name: Set up root pass for mysql (localhost)
  mysql_user: 
    name=root
    password="{{ mysql_root_pass }}"
    state=present
    host={{ item }}
    check_implicit_admin=yes
    login_user=root
    login_password="{{ mysql_root_pass }}"
  with_items:
    - localhost

- name: Prepare root .my.cnf
  template:
    src="{{ mysql_client_template_version }}/client.my.cnf.j2"
    dest=/root/.my.cnf
    owner=root
    group=root
    mode=0600
  with_items:
    - user: root
      pass: '{{ mysql_root_pass }}'

- name: Set up root pass for mysql (other localhost aliases)
  mysql_user: 
    name=root
    password="{{ mysql_root_pass }}"
    state=present
    host="{{ item }}"
  with_items:
    - localhost
    - 127.0.0.1
    - ::1

- name: Create ncdba user for mysql
  mysql_user:
    name=ncdba
    password="{{ mysql_ncdba_pass }}"
    priv=*.*:ALL
    state=present

- name: Create nccheckdb user for mysql
  mysql_user: 
    name=nccheckdb
    password="{{ mysql_nccheckdb_pass }}"
    priv="*.*:PROCESS,REPLICATION CLIENT,SELECT"
    state=present

- name: Prepare zabbix .my.cnf
  template:
    src="{{ mysql_client_template_version }}/client.my.cnf.j2"
    dest=/var/lib/nc_zabbix/.my.cnf
    owner=nc-zabbix
    group=nc-zabbix
    mode=0600
  with_items:
    - user: nccheckdb
      pass: '{{ mysql_nccheckdb_pass }}'

- name: Prepare zabbix mysql_credentials
  template:
    src="{{ mysql_client_template_version }}/client.my.cnf.j2"
    dest=/var/lib/nc_zabbix/conf/mysql_credentials
    owner=nc-zabbix
    group=nc-zabbix
    mode=0600
  with_items:
    - user: nccheckdb
      pass: '{{ mysql_nccheckdb_pass }}'

- name: Create ncbackupdb user for mysql
  mysql_user:
    name=ncbackupdb
    password="{{ mysql_ncbackupdb_pass }}"
    priv="*.*:LOCK TABLES,SELECT,SHOW DATABASES,RELOAD,EVENT,REPLICATION CLIENT"
    state=present

# Configure MySQL ncbackup
# Should we reference backup variables here?
- name: Ensure ncbackup key directory
  file:
    dest=/opt/ncscripts/backup/key/
    owner=ncbackup
    group=ncbackup
    state=directory
  when:
    database_mysql_backup == 'Yes'

- name: Prepare ncbackup mysql_backup.creds
  template:
    src="{{ mysql_client_template_version }}/mysql_backup.creds.j2"
    dest=/opt/ncscripts/backup/key/mysql_backup.creds
    owner=ncbackup
    group=ncbackup
    mode=0600
  with_items:
    - user: ncbackupdb
      pass: '{{ mysql_ncbackupdb_pass }}'
  when:
    database_mysql_backup == 'Yes'

# Do some cleanup
- name: Ensure the test database is removed
  mysql_db:
    name=test
    state=absent

- name: Ensure secured database
  shell:
    mysql -e "{{ item }}"
  with_items:
    - "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'; FLUSH PRIVILEGES;"
    - "DELETE FROM mysql.user WHERE User=''; FLUSH PRIVILEGES;"
    - "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1'); FLUSH PRIVILEGES;"

- name: Ensure credentials file removed from root
  file:
    path=/root/.my.cnf
    state=absent
